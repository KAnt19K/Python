'''
3. Создайте собственный класс-исключение, который должен проверять содержимое
списка на наличие только чисел. Проверить работу исключения на реальном примере.
Запрашивать у пользователя данные и заполнять список необходимо только числами.
Класс-исключение должен контролировать типы данных элементов списка.

Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
пока пользователь сам не остановит работу скрипта, введя, например, команду «stop».
При этом скрипт завершается, сформированный список с числами выводится на экран.

Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
Вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю
ввести текст (не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.
'''


class MyError:
    def __init__(self, args):
        self.my_list = []

    def my_number(self):
        while True:
            try:
                number = int(input(' Введите число'))
                self.my_list.append(number)
                print(f'Ваш список: {self.my_list}')
            except:
                print(f'Введена строка')
            yet_number = input('Хотите ввести еще число. Если да напишите - Y, если нет, то напишите - N')
            if yet_number == 'Y' or yet_number == 'y':
                print(my_err.my_number())
            elif yet_number == 'N' or yet_number == 'n':
                return ('Функция завершена')
            else:
                return ('Функция завершена')


my_err = MyError(1)
print(my_err.my_number())
